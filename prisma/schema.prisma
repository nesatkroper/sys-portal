generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Database {
  id            String             @id @default(uuid())
  name          String
  host          String
  port          Int
  username      String
  status        String             @default("disconnected")
  lastConnected String?
  tables        Int?
  size          String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  backups       BackupItem[]
  exports       ExportItem[]
  queryHistory  QueryHistoryItem[]
}

model User {
  id          String   @id @default(uuid())
  username    String
  email       String   @unique
  role        String
  status      String   @default("active")
  lastLogin   String?
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  password    String
}

model BackupItem {
  id         String   @id @default(uuid())
  name       String
  databaseId String
  size       String
  status     String   @default("in-progress")
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  database   Database @relation(fields: [databaseId], references: [id])
}

model ExportItem {
  id          String   @id @default(uuid())
  name        String
  format      String
  databaseId  String
  tables      String[]
  status      String   @default("processing")
  progress    Float?
  size        Int?
  downloadUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  database    Database @relation(fields: [databaseId], references: [id])
}

model QueryHistoryItem {
  id           String   @id @default(uuid())
  query        String
  databaseId   String
  executedAt   String
  duration     Int
  status       String   @default("success")
  rowsAffected Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  database     Database @relation(fields: [databaseId], references: [id])
}

model SystemMetrics {
  id            String   @id @default(uuid())
  cpu           Float
  memory        Float
  disk          Float
  connections   Int
  activeQueries Int
  timestamp     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Service {
  serviceId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  serviceName  String   @unique @default("Nun service") @db.VarChar(50)
  serviceType  String   @default("default") @db.VarChar(50)
  schema       String?  @db.VarChar(100)
  ownerName   String?  @db.VarChar(200)
  ownerEmail  String?  @db.VarChar(200)
  ownerPhone  String?  @db.VarChar(20)
  apiKey      String?   @unique @db.Text
  apiSecret   String?  @unique @db.Text
  apiUrl      String?   @unique @db.Text
  apiVersion  String   @default("v1") @db.VarChar(10)
  description String?
  status      Status   @default(active)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// @TypeOnly
model Schema {
  unique_id          String   @id @default(uuid())
  schema_name        String
  size_bytes         String
  num_tables         Int
  num_columns        Int
  owner              String
  num_connections    Int
  connection_status  String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}



enum Status {
  active
  inactive
  pending
  archived
}

enum BackupType {
  full
  incremental
  differential
}

enum ExportFormat {
  xlsx
  csv
  json
  sql
}

enum QueryStatus {
  success
  failed
  in_progress
}

enum UserRole {
  admin
  user
  viewer
}

enum UserStatus {
  active
  inactive
  banned
}

enum DatabaseStatus {
  connected
  disconnected
  error
}
